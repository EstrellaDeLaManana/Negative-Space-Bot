from random import randint
from RPG.consts.items import items


class Player:
    def __init__(self, name):
        self.name = name  # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
        self.hp = 60
        self.armor = 0
        self.level = 1
        self.money = 250

        self.endurance = 1  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä–æ–∫–∞
        self.accuracy = 6
        self.perception = 1
        self.charisma = 1
        self.agility = 1
        self.luck = 4

        self.quest_items = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤

        self.inventory = [None] * 5  # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
        self.weapon = None
        self.armor_set = None
        self.laser_ammo = 0

        self.in_fight = False  # –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –±–æ—é

    def get_stats(self):
        stats = f'*{self.name}* üòé\n' \
                f'üéñ _–£—Ä–æ–≤–µ–Ω—å_: {self.level}\n' \
                f'‚ù§ _–ó–¥–æ—Ä–æ–≤—å–µ_: {self.hp}\n' \
                f'üíµ _–ö—Ä–µ–¥–∏—Ç—ã_: {self.money}\n' \
                f'*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏*\n' \
                f'üî´ _–ú–µ—Ç–∫–æ—Å—Ç—å_: {self.accuracy}\n' \
                f'üëÇüèª _–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ_: {self.perception}\n' \
                f'üèÉüèª‚Äç‚ôÇ _–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å_: {self.endurance}\n' \
                f'üó£ _–•–∞—Ä–∏–∑–º–∞_: {self.charisma}\n' \
                f'üèÉüèª‚Äç‚ôÇ _–õ–æ–≤–∫–æ—Å—Ç—å_: {self.agility}\n' \
                f'üçÄ _–£–¥–∞—á–∞_: {self.luck}'
        return stats

    def add_item(self, item):
        added_item = False
        for i in range(len(self.inventory)):
            if self.inventory[i] is None:
                self.inventory[i] = item
                added_item = True
                break
        return added_item

    def buy_item(self, item, trader_factor):
        if self.money >= item.price:
            if not self.add_item(item):
                return False, '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω'
            else:
                self.money -= int(item.price * trader_factor)
                return True, '–£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ:'
        else:
            return False, '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥'

    def sell_item(self, item, trader_factor):
        self.money += int(item.price / trader_factor)
        self.inventory.remove(item)

    def drop_item(self, item):
        self.inventory[self.inventory.index(item)] = None
        self.sort_inventory()

    def sort_inventory(self):
        for i in range(len(self.inventory)):
            if i != 0:
                if self.inventory[i - 1] is None:
                    self.inventory[i - 1] = self.inventory[i]
                    self.inventory[i] = None

    def get_equipment(self):
        weapon, armor_set = self.weapon, self.armor_set
        if self.weapon is None:
            weapon = ' <–ü—É—Å—Ç–æ>'
        if self.armor_set is None:
            armor_set = ' <–ü—É—Å—Ç–æ>'
        equipment = f'üòé *{self.name}*\n' \
                    f'üß• _–ö–æ–º–ø–ª–µ–∫—Ç –±—Ä–æ–Ω–∏_: {str(armor_set)[1:]}\n' \
                    f'üî´ _–û—Ä—É–∂–∏–µ_: {str(weapon)[1:]}\n' \
                    f'üîã _–õ–∞–∑–µ—Ä–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏_: {self.laser_ammo}'
        return equipment

    def attack(self, enemy, shot_accuracy, shot_damage_coef):
        if randint(0, 19) in range(self.accuracy + shot_accuracy):
            if randint(0, 9) in range(self.luck):
                enemy.hp -= self.weapon.damage * 3
                return f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ, —Ç—ã –Ω–∞–Ω–æ—Å–∏—à—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É ' \
                       f'—É—Ä–æ–Ω –≤ {self.weapon.damage * 3 * shot_damage_coef} hp'
            else:
                enemy.hp -= self.weapon.damage * shot_damage_coef
                return f'–ü–æ–ø–∞–¥–∞–Ω–∏–µ! –¢—ã –Ω–∞–Ω–∞—Å–æ—à—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É —É—Ä–æ–Ω –≤ {self.weapon.damage * shot_damage_coef} hp'

        else:
            if randint(0, 9) not in range(self.luck):
                self.hp -= self.weapon.damage
                return f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–∞—Ö! –¢—ã –ø–æ–ø–∞–¥–∞–µ—à—å ' \
                       f'—Å–µ–±–µ –≤ –Ω–æ–≥—É –∏ –Ω–∞–Ω–æ—Å–∏—à—å —É—Ä–æ–Ω –≤ —Ä–∞–∑–º–µ—Ä–µ {self.weapon.damage * shot_damage_coef} hp'
            return '–ü—Ä–æ–º–∞—Ö!'

    def inventory_to_str(self):
        inventory = []
        for item in self.inventory:
            if item is not None:
                for item_name in items:
                    if items[item_name] == item:
                        inventory.append(item_name)
        return ', '.join(inventory)

    def weapon_to_str(self):
        weapon_name = None
        for item_name in items:
            if items[item_name] == self.weapon:
                weapon_name = item_name
        return weapon_name

    def armor_to_str(self):
        armor_name = None
        for item_name in items:
            if items[item_name] == self.armor_set:
                armor_name = item_name
        return armor_name
